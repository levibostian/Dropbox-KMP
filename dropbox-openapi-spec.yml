openapi: 3.0.0
info:
  title: Dropbox API Reference
  description: >+
    If you want more information on how to use our API please refer to our
    [Developer Portal](https://www.dropbox.com/developers). 
  version: 1.0.0
servers:
  - url: https://api.dropbox.com  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: account
  - name: auth
  - name: check
  - name: contacts
  - name: file_properties
    description: >
      This namespace contains helpers for property and template metadata
      endpoints.


      These endpoints enable you to tag arbitrary key/value data to Dropbox
      files.


      The most basic unit in this namespace is the :type:`PropertyField`. These
      fields encapsulate the actual key/value data.


      Fields are added to a Dropbox file using a :type:`PropertyGroup`. Property
      groups contain a reference to a Dropbox file and a
      :type:`PropertyGroupTemplate`. Property groups are uniquely identified by
      the combination of their associated Dropbox file and template.


      The :type:`PropertyGroupTemplate` is a way of restricting the possible key
      names and value types of the data within a property group. The possible
      key names and value types are explicitly enumerated using
      :type:`PropertyFieldTemplate` objects.


      You can think of a property group template as a class definition for a
      particular key/value metadata object, and the property groups themselves
      as the instantiations of these objects.


      Templates are owned either by a user/app pair or team/app pair. Templates
      and their associated properties can't be accessed by any app other than
      the app that created them, and even then, only when the app is linked with
      the owner of the template (either a user or team).


      User-owned templates are accessed via the user-auth
      file_properties/templates/*_for_user endpoints, while team-owned templates
      are accessed via the team-auth file_properties/templates/*_for_team
      endpoints. Properties associated with either type of template can be
      accessed via the user-auth properties/* endpoints.


      Finally, properties can be accessed from a number of endpoints that return
      metadata, including `files/get_metadata`, and `files/list_folder`.
      Properties can also be added during upload, using `files/upload`.
  - name: file_requests
    description: >
      This namespace contains endpoints and data types for file request
      operations.
  - name: files
    description: >
      This namespace contains endpoints and data types for basic file
      operations.
  - name: sharing
    description: >
      This namespace contains endpoints and data types for creating and managing
      shared links and shared folders.
  - name: users
    description: |
      This namespace contains endpoints and data types for user management.
paths:
  /2/account/set_profile_photo:
    post:
      tags:
        - account
      summary: set_profile_photo
      operationId: set_profile_photo
      description: >-
        [set_profile_photo](https://www.dropbox.com/developers/documentation/http/documentation#account-set_profile_photo)


        scope: `account_info.write`


        Sets a user's profile photo.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"photo\": {\n        \".tag\": \"base64_data\",
                \n        \"base64_data\":
                \"SW1hZ2UgZGF0YSBpbiBiYXNlNjQtZW5jb2RlZCBieXRlcy4gTm90IGEgdmFsaWQgZXhhbXBsZS4=\"\n   
                }\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                profile_photo_url: >-
                  https://dl-web.dropbox.com/account_photo/get/dbaphid%3AAAHWGmIXV3sUuOmBfTz0wPsiqHUpBWvv3ZA?vers=1556069330102&size=128x128
  /2/auth/token/from_oauth1:
    post:
      tags:
        - auth
      summary: token/from_oauth1
      operationId: token_from_oauth1
      description: >-
        [token/from_oauth1](https://www.dropbox.com/developers/documentation/http/documentation#auth-token-from_oauth1)


        scope: `None`


        Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access
        token.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"oauth1_token\": \"qievr8hamyg6ndck\", \n   
                \"oauth1_token_secret\": \"qomoftv0472git7\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                oauth2_token: >-
                  9mCrkS7BIdAAAAAAAAAAHHS0TsSnpYvKQVtKdBnN5IuzhYOGblSgTcHgBFKFMmFn
  /2/auth/token/revoke:
    post:
      tags:
        - auth
      summary: token/revoke
      operationId: token_revoke
      description: >-
        [token/revoke](https://www.dropbox.com/developers/documentation/http/documentation#auth-token-revoke)


        scope: `None`


        Disables the access token used to authenticate the call.      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/check/app:
    post:
      tags:
        - check
      summary: app
      operationId: app
      description: >-
        [app](https://www.dropbox.com/developers/documentation/http/documentation#check-app)


        scope: `None`


        This endpoint performs App Authentication, validating the supplied app
        key and secret, and returns the supplied string, to allow you to test
        your code and connection to the Dropbox API. It has no other effect. If
        you receive an HTTP 200 response with the supplied query, it indicates
        at least part of the Dropbox API infrastructure is working and that the
        app key and secret valid.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"query\": \"foo\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                result: foo
  /2/check/user:
    post:
      tags:
        - check
      summary: user
      operationId: user
      description: >-
        [user](https://www.dropbox.com/developers/documentation/http/documentation#check-user)


        scope: `None`


        This endpoint performs User Authentication, validating the supplied
        access token, and returns the supplied string, to allow you to test your
        code and connection to the Dropbox API. It has no other effect. If you
        receive an HTTP 200 response with the supplied query, it indicates at
        least part of the Dropbox API infrastructure is working and that the
        access token is valid.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"query\": \"foo\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                result: foo
  /2/contacts/delete_manual_contacts:
    post:
      tags:
        - contacts
      summary: delete_manual_contacts
      operationId: delete_manual_contacts
      description: >-
        [delete_manual_contacts](https://www.dropbox.com/developers/documentation/http/documentation#contacts-delete_manual_contacts)


        scope: `contacts.write`


        Removes all manually added contacts. You'll still keep contacts who are
        on your team or who you imported. New contacts will be added when you
        share.      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/contacts/delete_manual_contacts_batch:
    post:
      tags:
        - contacts
      summary: delete_manual_contacts_batch
      operationId: delete_manual_contacts_batch
      description: >-
        [delete_manual_contacts_batch](https://www.dropbox.com/developers/documentation/http/documentation#contacts-delete_manual_contacts_batch)


        scope: `contacts.write`


        Removes manually added contacts from the given list.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"email_addresses\": [\n       
                \"contactemailaddress1@domain.com\", \n       
                \"contactemailaddress2@domain.com\"\n    ]\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/properties/add:
    post:
      tags:
        - file_properties
      summary: properties/add
      operationId: add
      description: >-
        [properties/add](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-add)


        scope: `files.metadata.write`


        Add property groups to a Dropbox file. See `templates/add_for_user` or
        `templates/add_for_team` to create new templates.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/my_awesome/word.docx\", \n   
                \"property_groups\": [\n        {\n            \"template_id\":
                \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\", \n            \"fields\":
                [\n                {\n                    \"name\": \"Security
                Policy\", \n                    \"value\":
                \"Confidential\"\n                }\n            ]\n       
                }\n    ]\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/properties/overwrite:
    post:
      tags:
        - file_properties
      summary: properties/overwrite
      operationId: overwrite
      description: >-
        [properties/overwrite](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-overwrite)


        scope: `files.metadata.write`


        Overwrite property groups associated with a file. This endpoint should
        be used instead of `properties/update` when property groups are being
        updated via a "snapshot" instead of via a "delta". In other words, this
        endpoint will delete all omitted fields from a property group, whereas
        `properties/update` will only delete fields that are explicitly marked
        for deletion.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/my_awesome/word.docx\", \n   
                \"property_groups\": [\n        {\n            \"template_id\":
                \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\", \n            \"fields\":
                [\n                {\n                    \"name\": \"Security
                Policy\", \n                    \"value\":
                \"Confidential\"\n                }\n            ]\n       
                }\n    ]\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/properties/remove:
    post:
      tags:
        - file_properties
      summary: properties/remove
      operationId: properties_remove
      description: >-
        [properties/remove](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-remove)


        scope: `files.metadata.write`


        Permanently removes the specified property group from the file. To
        remove specific property field key value pairs, see `properties/update`.
        To update a template, see `templates/update_for_user` or
        `templates/update_for_team`. To remove a template, see
        `templates/remove_for_user` or `templates/remove_for_team`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/my_awesome/word.docx\", \n   
                \"property_template_ids\": [\n       
                \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\"\n    ]\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/properties/search:
    post:
      tags:
        - file_properties
      summary: properties/search
      operationId: properties_search
      description: >-
        [properties/search](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-search)


        scope: `files.metadata.read`


        Search across property templates for particular property field values.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"queries\": [\n        {\n            \"query\":
                \"Compliance Bot - Beta\", \n            \"mode\":
                {\n                \".tag\": \"field_name\", \n               
                \"field_name\": \"Security\"\n            }, \n           
                \"logical_operator\": \"or_operator\"\n        }\n    ], \n   
                \"template_filter\": \"filter_none\"\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: ' Bearer IU571Pc9cGAAAAAAAAAAAQh57r-VTd7qBjZBUsVHLR6NRVTcd0FOThotVQmF9q9F'
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                  - id: id:a4ayc_80_OEAAAAAAAAAXz
                    path: /my_awesome/word.docx
                    is_deleted: false
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
  /2/file_properties/properties/search/continue:
    post:
      tags:
        - file_properties
      summary: properties/search/continue
      operationId: properties_search_continue
      description: >-
        [properties/search/continue](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-search-continue)


        scope: `files.metadata.read`


        Once a cursor has been retrieved from `properties/search`, use this to
        paginate through all search results.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                  - id: id:a4ayc_80_OEAAAAAAAAAXz
                    path: /my_awesome/word.docx
                    is_deleted: false
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
  /2/file_properties/properties/update:
    post:
      tags:
        - file_properties
      summary: properties/update
      operationId: properties_update
      description: >-
        [properties/update](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-properties-update)


        scope: `files.metadata.write`


        Add, update or remove properties associated with the supplied file and
        templates. This endpoint should be used instead of
        `properties/overwrite` when property groups are being updated via a
        "delta" instead of via a "snapshot" . In other words, this endpoint will
        not delete any omitted fields from a property group, whereas
        `properties/overwrite` will delete any fields that are omitted from a
        property group.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/my_awesome/word.docx\", \n   
                \"update_property_groups\": [\n        {\n           
                \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\", \n           
                \"add_or_update_fields\": [\n               
                {\n                    \"name\": \"Security Policy\",
                \n                    \"value\":
                \"Confidential\"\n                }\n            ],
                \n            \"remove_fields\": []\n        }\n    ]\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/templates/add_for_team:
    post:
      tags:
        - file_properties
      summary: templates/add_for_team
      operationId: templates_add_for_team
      description: >-
        [templates/add_for_team](https://www.dropbox.com/developers/documentation/http/teams#file_properties-templates-add_for_team)


        scope: `files.team_metadata.write`


        Add a template associated with a team. See `properties/add` to add
        properties to a file or folder.

        Note: this endpoint will create team-owned templates.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"Security\", \n    \"description\": \"These
                properties describe how confidential this file or folder is.\",
                \n    \"fields\": [\n        {\n            \"name\": \"Security
                Policy\", \n            \"description\": \"This is the security
                policy of the file or folder described.\\nPolicies can be
                Confidential, Public or Internal.\", \n            \"type\":
                \"string\"\n        }\n    ]\n}"
      security:
        - bearerAuth: []
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_properties/templates/add_for_user:
    post:
      tags:
        - file_properties
      summary: templates/add_for_user
      operationId: templates_add_for_user
      description: >-
        [templates/add_for_user](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-templates-add_for_user)


        scope: `files.metadata.write`


        Add a template associated with a user. See `properties/add` to add
        properties to a file. This endpoint can't be called on a team member or
        admin's behalf.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"Security\", \n    \"description\": \"These
                properties describe how confidential this file or folder is.\",
                \n    \"fields\": [\n        {\n            \"name\": \"Security
                Policy\", \n            \"description\": \"This is the security
                policy of the file or folder described.\\nPolicies can be
                Confidential, Public or Internal.\", \n            \"type\":
                \"string\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_properties/templates/get_for_team:
    post:
      tags:
        - file_properties
      summary: templates/get_for_team
      operationId: templates_get_for_team
      description: >-
        [templates/get_for_team](https://www.dropbox.com/developers/documentation/http/teams#file_properties-templates-get_for_team)


        scope: `files.team_metadata.write`


        Get the schema for a specified template.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\"\n}"'
      security:
        - bearerAuth: []
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Security
                description: >-
                  These properties describe how confidential this file or folder
                  is.
                fields:
                  - name: Security Policy
                    description: >-
                      This is the security policy of the file or folder
                      described.

                      Policies can be Confidential, Public or Internal.
                    type:
                      .tag: string
  /2/file_properties/templates/get_for_user:
    post:
      tags:
        - file_properties
      summary: templates/get_for_user
      operationId: templates_get_for_user
      description: >-
        [templates/get_for_user](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-templates-get_for_user)


        scope: `files.metadata.read`


        Get the schema for a specified template. This endpoint can't be called
        on a team member or admin's behalf.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Security
                description: >-
                  These properties describe how confidential this file or folder
                  is.
                fields:
                  - name: Security Policy
                    description: >-
                      This is the security policy of the file or folder
                      described.

                      Policies can be Confidential, Public or Internal.
                    type:
                      .tag: string
  /2/file_properties/templates/list_for_team:
    post:
      tags:
        - file_properties
      summary: templates/list_for_team
      operationId: templates_list_for_team
      description: >-
        [templates/list_for_team](https://www.dropbox.com/developers/documentation/http/teams#file_properties-templates-list_for_team)


        scope: `files.team_metadata.write`


        Get the template identifiers for a team. To get the schema of each
        template use `templates/get_for_team`.      
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_ids:
                  - ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_properties/templates/list_for_user:
    post:
      tags:
        - file_properties
      summary: templates/list_for_user
      operationId: templates_list_for_user
      description: >-
        [templates/list_for_user](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-templates-list_for_user)


        scope: `files.metadata.read`


        Get the template identifiers for a team. To get the schema of each
        template use `templates/get_for_user`. This endpoint can't be called on
        a team member or admin's behalf.      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_ids:
                  - ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_properties/templates/remove_for_team:
    post:
      tags:
        - file_properties
      summary: templates/remove_for_team
      operationId: templates_remove_for_team
      description: >-
        [templates/remove_for_team](https://www.dropbox.com/developers/documentation/http/teams#file_properties-templates-remove_for_team)


        scope: `files.team_metadata.write`


        Permanently removes the specified template created from
        `templates/add_for_user`. All properties associated with the template
        will also be removed. This action cannot be undone.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\"\n}"'
      security:
        - bearerAuth: []
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/templates/remove_for_user:
    post:
      tags:
        - file_properties
      summary: templates/remove_for_user
      operationId: templates_remove_for_user
      description: >-
        [templates/remove_for_user](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-templates-remove_for_user)


        scope: `files.metadata.write`


        Permanently removes the specified template created from
        `templates/add_for_user`. All properties associated with the template
        will also be removed. This action cannot be undone.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\"\n}"'
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/file_properties/templates/update_for_team:
    post:
      tags:
        - file_properties
      summary: templates/update_for_team
      operationId: templates_update_for_team
      description: >-
        [templates/update_for_team](https://www.dropbox.com/developers/documentation/http/teams#file_properties-templates-update_for_team)


        scope: `files.team_metadata.write`


        Update a template associated with a team. This route can update the
        template name, the template description and add optional properties to
        templates.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\", \n   
                \"name\": \"New Security Template Name\", \n    \"description\":
                \"These properties will describe how confidential this file or
                folder is.\", \n    \"add_fields\": [\n        {\n           
                \"name\": \"Security Policy\", \n            \"description\":
                \"This is the security policy of the file or folder
                described.\\nPolicies can be Confidential, Public or
                Internal.\", \n            \"type\": \"string\"\n        }\n   
                ]\n}"
      security:
        - bearerAuth: []
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_properties/templates/update_for_user:
    post:
      tags:
        - file_properties
      summary: templates/update_for_user
      operationId: templates_update_for_user
      description: >-
        [templates/update_for_user](https://www.dropbox.com/developers/documentation/http/documentation#file_properties-templates-update_for_user)


        scope: `files.metadata.write`


        Update a template associated with a user. This route can update the
        template name, the template description and add optional properties to
        templates. This endpoint can't be called on a team member or admin's
        behalf.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"template_id\": \"ptid:1a5n2i6d3OYEAAAAAAAAAYa\", \n   
                \"name\": \"New Security Template Name\", \n    \"description\":
                \"These properties will describe how confidential this file or
                folder is.\", \n    \"add_fields\": [\n        {\n           
                \"name\": \"Security Policy\", \n            \"description\":
                \"This is the security policy of the file or folder
                described.\\nPolicies can be Confidential, Public or
                Internal.\", \n            \"type\": \"string\"\n        }\n   
                ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
  /2/file_requests/count:
    post:
      tags:
        - file_requests
      summary: count
      operationId: count
      description: >-
        [count](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-count)


        scope: `file_requests.read`


        Returns the total number of file requests owned by this user. Includes
        both open and closed file requests.      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_request_count: 15
  /2/file_requests/create:
    post:
      tags:
        - file_requests
      summary: create
      operationId: create
      description: >-
        [create](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-create)


        scope: `file_requests.write`


        Creates a file request for this user.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"title\": \"Homework submission\", \n   
                \"destination\": \"/File Requests/Homework\", \n   
                \"deadline\": {\n        \"deadline\": \"2020-10-12T17:00:00Z\",
                \n        \"allow_late_uploads\": \"seven_days\"\n    }, \n   
                \"open\": true\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: oaCAVmEyrqYnkZX9955Y
                url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                title: Homework submission
                created: '2015-10-05T17:00:00Z'
                is_open: true
                file_count: 3
                destination: /File Requests/Homework
                deadline:
                  deadline: '2020-10-12T17:00:00Z'
                  allow_late_uploads:
                    .tag: seven_days
  /2/file_requests/delete:
    post:
      tags:
        - file_requests
      summary: delete
      operationId: file_requests_delete
      description: >-
        [delete](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-delete)


        scope: `file_requests.write`


        Delete a batch of closed file requests.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"ids\": [\n        \"oaCAVmEyrqYnkZX9955Y\", \n       
                \"BaZmehYoXMPtaRmfTbSG\"\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_requests:
                  - id: oaCAVmEyrqYnkZX9955Y
                    url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                    title: Homework submission
                    created: '2015-10-05T17:00:00Z'
                    is_open: true
                    file_count: 3
                    destination: /File Requests/Homework
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                      allow_late_uploads:
                        .tag: seven_days
                  - id: BAJ7IrRGicQKGToykQdB
                    url: https://www.dropbox.com/request/BAJ7IrRGjcQKGToykQdB
                    title: Photo contest submission
                    created: '2015-11-02T04:00:00Z'
                    is_open: true
                    file_count: 105
                    destination: /Photo contest entries
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                  - id: rxwMPvK3ATTa0VxOJu5T
                    url: https://www.dropbox.com/request/rxwMPvK3ATTa0VxOJu5T
                    title: Wedding photo submission
                    created: '2015-12-15T13:02:00Z'
                    is_open: true
                    file_count: 37
                    destination: /Wedding photos
  /2/file_requests/delete_all_closed:
    post:
      tags:
        - file_requests
      summary: delete_all_closed
      operationId: delete_all_closed
      description: >-
        [delete_all_closed](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-delete_all_closed)


        scope: `file_requests.write`


        Delete all closed file requests owned by this user.      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_requests:
                  - id: oaCAVmEyrqYnkZX9955Y
                    url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                    title: Homework submission
                    created: '2015-10-05T17:00:00Z'
                    is_open: true
                    file_count: 3
                    destination: /File Requests/Homework
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                      allow_late_uploads:
                        .tag: seven_days
                  - id: BAJ7IrRGicQKGToykQdB
                    url: https://www.dropbox.com/request/BAJ7IrRGjcQKGToykQdB
                    title: Photo contest submission
                    created: '2015-11-02T04:00:00Z'
                    is_open: true
                    file_count: 105
                    destination: /Photo contest entries
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                  - id: rxwMPvK3ATTa0VxOJu5T
                    url: https://www.dropbox.com/request/rxwMPvK3ATTa0VxOJu5T
                    title: Wedding photo submission
                    created: '2015-12-15T13:02:00Z'
                    is_open: true
                    file_count: 37
                    destination: /Wedding photos
  /2/file_requests/get:
    post:
      tags:
        - file_requests
      summary: get
      operationId: get
      description: >-
        [get](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-get)


        scope: `file_requests.read`


        Returns the specified file request.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"id\": \"oaCAVmEyrqYnkZX9955Y\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: oaCAVmEyrqYnkZX9955Y
                url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                title: Homework submission
                created: '2015-10-05T17:00:00Z'
                is_open: true
                file_count: 3
                destination: /File Requests/Homework
                deadline:
                  deadline: '2020-10-12T17:00:00Z'
                  allow_late_uploads:
                    .tag: seven_days
  /2/file_requests/list_v2:
    post:
      tags:
        - file_requests
      summary: list
      operationId: list
      description: >-
        [list](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-list)


        scope: `file_requests.read`


        Returns a list of file requests owned by this user. For apps with the
        app folder permission, this will only return file requests with
        destinations in the app folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"limit\": 1000\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_requests:
                  - id: oaCAVmEyrqYnkZX9955Y
                    url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                    title: Homework submission
                    created: '2015-10-05T17:00:00Z'
                    is_open: true
                    file_count: 3
                    destination: /File Requests/Homework
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                      allow_late_uploads:
                        .tag: seven_days
                  - id: BAJ7IrRGicQKGToykQdB
                    url: https://www.dropbox.com/request/BAJ7IrRGjcQKGToykQdB
                    title: Photo contest submission
                    created: '2015-11-02T04:00:00Z'
                    is_open: true
                    file_count: 105
                    destination: /Photo contest entries
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                  - id: rxwMPvK3ATTa0VxOJu5T
                    url: https://www.dropbox.com/request/rxwMPvK3ATTa0VxOJu5T
                    title: Wedding photo submission
                    created: '2015-12-15T13:02:00Z'
                    is_open: true
                    file_count: 37
                    destination: /Wedding photos
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
                has_more: true
  /2/file_requests/list/continue:
    post:
      tags:
        - file_requests
      summary: list/continue
      operationId: list_continue
      description: >-
        [list/continue](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-list-continue)


        scope: `file_requests.read`


        Once a cursor has been retrieved from `list:2`, use this to paginate
        through all file requests. The cursor must come from a previous call to
        `list:2` or `list/continue`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_requests:
                  - id: oaCAVmEyrqYnkZX9955Y
                    url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                    title: Homework submission
                    created: '2015-10-05T17:00:00Z'
                    is_open: true
                    file_count: 3
                    destination: /File Requests/Homework
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                      allow_late_uploads:
                        .tag: seven_days
                  - id: BAJ7IrRGicQKGToykQdB
                    url: https://www.dropbox.com/request/BAJ7IrRGjcQKGToykQdB
                    title: Photo contest submission
                    created: '2015-11-02T04:00:00Z'
                    is_open: true
                    file_count: 105
                    destination: /Photo contest entries
                    deadline:
                      deadline: '2020-10-12T17:00:00Z'
                  - id: rxwMPvK3ATTa0VxOJu5T
                    url: https://www.dropbox.com/request/rxwMPvK3ATTa0VxOJu5T
                    title: Wedding photo submission
                    created: '2015-12-15T13:02:00Z'
                    is_open: true
                    file_count: 37
                    destination: /Wedding photos
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
                has_more: true
  /2/file_requests/update:
    post:
      tags:
        - file_requests
      summary: update
      operationId: update
      description: >-
        [update](https://www.dropbox.com/developers/documentation/http/documentation#file_requests-update)


        scope: `file_requests.write`


        Update a file request.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"id\": \"oaCAVmEyrqYnkZX9955Y\", \n    \"title\":
                \"Homework submission\", \n    \"destination\": \"/File
                Requests/Homework\", \n    \"deadline\": {\n        \".tag\":
                \"update\", \n        \"deadline\": \"2020-10-12T17:00:00Z\",
                \n        \"allow_late_uploads\": \"seven_days\"\n    }, \n   
                \"open\": true\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: oaCAVmEyrqYnkZX9955Y
                url: https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y
                title: Homework submission
                created: '2015-10-05T17:00:00Z'
                is_open: true
                file_count: 3
                destination: /File Requests/Homework
                deadline:
                  deadline: '2020-10-12T17:00:00Z'
                  allow_late_uploads:
                    .tag: seven_days
  /2/files/copy_v2:
    post:
      tags:
        - files
      summary: copy
      operationId: copy
      description: >-
        [copy](https://www.dropbox.com/developers/documentation/http/documentation#files-copy)


        scope: `files.content.write`


        Copy a file or folder to a different location in the user's Dropbox.

        If the source path is a folder all its contents will be copied.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"from_path\": \"/Homework/math\", \n    \"to_path\":
                \"/Homework/algebra\", \n    \"allow_shared_folder\": false,
                \n    \"autorename\": false, \n    \"allow_ownership_transfer\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  .tag: file
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/copy_batch_v2:
    post:
      tags:
        - files
      summary: copy_batch
      operationId: copy_batch
      description: >-
        [copy_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-copy_batch)


        scope: `files.content.write`


        Copy multiple files or folders to different locations at once in the
        user's Dropbox.

        This route will replace `copy_batch:1`. The main difference is this
        route will return status for each entry, while `copy_batch:1` raises
        failure if any entry fails.

        This route will either finish synchronously, or return a job ID and do
        the async copy job in background. Please use `copy_batch/check:2` to
        check the job status.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"from_path\":
                \"/Homework/math\", \n            \"to_path\":
                \"/Homework/algebra\"\n        }\n    ], \n    \"autorename\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    success:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/copy_batch/check_v2:
    post:
      tags:
        - files
      summary: copy_batch/check
      operationId: copy_batch_check
      description: >-
        [copy_batch/check](https://www.dropbox.com/developers/documentation/http/documentation#files-copy_batch-check)


        scope: `files.content.write`


        Returns the status of an asynchronous job for `copy_batch:2`. It returns
        list of results for each entry.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    success:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/copy_reference/get:
    post:
      tags:
        - files
      summary: copy_reference/get
      operationId: copy_reference_get
      description: >-
        [copy_reference/get](https://www.dropbox.com/developers/documentation/http/documentation#files-copy_reference-get)


        scope: `files.content.write`


        Get a copy reference to a file or folder. This reference string can be
        used to save that file or folder to another user's Dropbox by passing it
        to `copy_reference/save`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"path\": \"/video.mp4\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  .tag: file
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
                copy_reference: z1X6ATl6aWtzOGq0c3g5Ng
                expires: '2045-05-12T15:50:38Z'
  /2/files/copy_reference/save:
    post:
      tags:
        - files
      summary: copy_reference/save
      operationId: copy_reference_save
      description: >-
        [copy_reference/save](https://www.dropbox.com/developers/documentation/http/documentation#files-copy_reference-save)


        scope: `files.content.write`


        Save a copy reference returned by `copy_reference/get` to the user's
        Dropbox.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"copy_reference\": \"z1X6ATl6aWtzOGq0c3g5Ng\", \n   
                \"path\": \"/video.mp4\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  .tag: file
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/create_folder_v2:
    post:
      tags:
        - files
      summary: create_folder
      operationId: create_folder
      description: >-
        [create_folder](https://www.dropbox.com/developers/documentation/http/documentation#files-create_folder)


        scope: `files.content.write`


        Create a folder at a given path.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/Homework/math\", \n    \"autorename\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  name: math
                  id: id:a4ayc_80_OEAAAAAAAAAXz
                  path_lower: /homework/math
                  path_display: /Homework/math
                  sharing_info:
                    read_only: false
                    parent_shared_folder_id: '84528192421'
                    traverse_only: false
                    no_access: false
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
  /2/files/create_folder_batch:
    post:
      tags:
        - files
      summary: create_folder_batch
      operationId: create_folder_batch
      description: >-
        [create_folder_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-create_folder_batch)


        scope: `files.content.write`


        Create multiple folders at once.

        This route is asynchronous for large batches, which returns a job ID
        immediately and runs the create folder batch asynchronously. Otherwise,
        creates the folders and returns the result synchronously for smaller
        inputs. You can force asynchronous behaviour by using the
        `CreateFolderBatchArg.force_async` flag.  Use
        `create_folder_batch/check` to check the job status.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"paths\": [\n        \"/Homework/math\"\n    ], \n   
                \"autorename\": false, \n    \"force_async\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    metadata:
                      name: math
                      id: id:a4ayc_80_OEAAAAAAAAAXz
                      path_lower: /homework/math
                      path_display: /Homework/math
                      sharing_info:
                        read_only: false
                        parent_shared_folder_id: '84528192421'
                        traverse_only: false
                        no_access: false
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
  /2/files/create_folder_batch/check:
    post:
      tags:
        - files
      summary: create_folder_batch/check
      operationId: create_folder_batch_check
      description: >-
        [create_folder_batch/check](https://www.dropbox.com/developers/documentation/http/documentation#files-create_folder_batch-check)


        scope: `files.content.write`


        Returns the status of an asynchronous job for `create_folder_batch`. If
        success, it returns list of result for each entry.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    metadata:
                      name: math
                      id: id:a4ayc_80_OEAAAAAAAAAXz
                      path_lower: /homework/math
                      path_display: /Homework/math
                      sharing_info:
                        read_only: false
                        parent_shared_folder_id: '84528192421'
                        traverse_only: false
                        no_access: false
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
  /2/files/delete_v2:
    post:
      tags:
        - files
      summary: delete
      operationId: delete
      description: >-
        [delete](https://www.dropbox.com/developers/documentation/http/documentation#files-delete)


        scope: `files.content.write`


        Delete the file or folder at a given path.

        If the path is a folder, all its contents will be deleted too.

        A successful response indicates that the file or folder was deleted. The
        returned metadata will be the corresponding `FileMetadata` or
        `FolderMetadata` for the item at time of deletion, and not a
        `DeletedMetadata` object.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"path\": \"/Homework/math/Prime_Numbers.txt\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  .tag: file
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/delete_batch:
    post:
      tags:
        - files
      summary: delete_batch
      operationId: delete_batch
      description: >-
        [delete_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-delete_batch)


        scope: `files.content.write`


        Delete multiple files/folders at once.

        This route is asynchronous, which returns a job ID immediately and runs
        the delete batch asynchronously. Use `delete_batch/check` to check the
        job status.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"path\":
                \"/Homework/math/Prime_Numbers.txt\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    metadata:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/delete_batch/check:
    post:
      tags:
        - files
      summary: delete_batch/check
      operationId: delete_batch_check
      description: >-
        [delete_batch/check](https://www.dropbox.com/developers/documentation/http/documentation#files-delete_batch-check)


        scope: `files.content.write`


        Returns the status of an asynchronous job for `delete_batch`. If
        success, it returns list of result for each entry.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    metadata:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/download:
    post:
      tags:
        - files
      summary: download
      operationId: download
      description: >-
        [download](https://www.dropbox.com/developers/documentation/http/documentation#files-download)


        scope: `files.content.read`


        Download a file from a user's Dropbox.      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "path": "/Homework/math/Prime_Numbers.txt"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/download_zip:
    post:
      tags:
        - files
      summary: download_zip
      operationId: download_zip
      description: >-
        [download_zip](https://www.dropbox.com/developers/documentation/http/documentation#files-download_zip)


        scope: `files.content.read`


        Download a folder from the user's Dropbox, as a zip file. The folder
        must be less than 20 GB in size and have fewer than 10,000 total files.
        The input cannot be a single file. Any single file must be less than 4GB
        in size.      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "path": "/Homework/math"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  name: math
                  id: id:a4ayc_80_OEAAAAAAAAAXz
                  path_lower: /homework/math
                  path_display: /Homework/math
                  sharing_info:
                    read_only: false
                    parent_shared_folder_id: '84528192421'
                    traverse_only: false
                    no_access: false
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
  /2/files/export:
    post:
      tags:
        - files
      summary: export
      operationId: export
      description: >-
        [export](https://www.dropbox.com/developers/documentation/http/documentation#files-export)


        scope: `files.content.read`


        Export a file from a user's Dropbox. This route only supports exporting
        files that cannot be downloaded directly  and whose
        `ExportResult.file_metadata` has `ExportInfo.export_as` populated.      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "path": "/Homework/math/Prime_Numbers.gsheet"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                export_metadata:
                  name: Prime_Numbers.xlsx
                  size: 7189
                  export_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_metadata:
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/get_file_lock_batch:
    post:
      tags:
        - files
      summary: get_file_lock_batch
      operationId: get_file_lock_batch
      description: >-
        [get_file_lock_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-get_file_lock_batch)


        scope: `files.content.read`


        Return the lock metadata for the given list of paths.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"path\": \"/John
                Doe/sample/test.pdf\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: success
                    metadata:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
                    lock:
                      content:
                        .tag: single_user
                        created: '2015-05-12T15:50:38Z'
                        lock_holder_account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                        lock_holder_team_id: dbtid:1234abcd
  /2/files/get_metadata:
    post:
      tags:
        - files
      summary: get_metadata
      operationId: get_metadata
      description: >-
        [get_metadata](https://www.dropbox.com/developers/documentation/http/documentation#files-get_metadata)


        scope: `files.metadata.read`


        Returns the metadata for a file or folder.

        Note: Metadata for the root folder is unsupported.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/Homework/math\", \n   
                \"include_media_info\": false, \n    \"include_deleted\": false,
                \n    \"include_has_explicit_shared_members\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: file
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/get_preview:
    post:
      tags:
        - files
      summary: get_preview
      operationId: get_preview
      description: >-
        [get_preview](https://www.dropbox.com/developers/documentation/http/documentation#files-get_preview)


        scope: `files.content.read`


        Get a preview for a file.

        Currently, PDF previews are generated for files with the following
        extensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt,
        .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.

        HTML previews are generated for files with the following extensions:
        .csv, .ods, .xls, .xlsm, .gsheet, .xlsx.

        Other formats will return an unsupported extension error.      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "path": "/word.docx"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/get_temporary_link:
    post:
      tags:
        - files
      summary: get_temporary_link
      operationId: get_temporary_link
      description: >-
        [get_temporary_link](https://www.dropbox.com/developers/documentation/http/documentation#files-get_temporary_link)


        scope: `files.content.read`


        Get a temporary link to stream content of a file. This link will expire
        in four hours and afterwards you will get 410 Gone. This URL should not
        be used to display content directly in the browser. The Content-Type of
        the link is determined automatically by the file's mime type.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"path\": \"/video.mp4\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
                link: >-
                  https://dl.dropboxusercontent.com/apitl/1/YXNkZmFzZGcyMzQyMzI0NjU2NDU2NDU2
  /2/files/get_temporary_upload_link:
    post:
      tags:
        - files
      summary: get_temporary_upload_link
      operationId: get_temporary_upload_link
      description: >-
        [get_temporary_upload_link](https://www.dropbox.com/developers/documentation/http/documentation#files-get_temporary_upload_link)


        scope: `files.content.write`


        Get a one-time use temporary upload link to upload a file to a Dropbox
        location.


        This endpoint acts as a delayed `upload`. The returned temporary upload
        link may be used to make a POST request with the data to be uploaded.
        The upload will then be perfomed with the `CommitInfo` previously
        provided to `get_temporary_upload_link` but evaluated only upon
        consumption. Hence, errors stemming from invalid `CommitInfo` with
        respect to the state of the user's Dropbox will only be communicated at
        consumption time. Additionally, these errors are surfaced as generic
        HTTP 409 Conflict responses, potentially hiding issue details. The
        maximum temporary upload link duration is 4 hours. Upon consumption or
        expiration, a new link will have to be generated. Multiple links may
        exist for a specific upload path at any given time.


        The POST request on the temporary upload link must have its Content-Type
        set to "application/octet-stream".


        Example temporary upload link consumption request:


        curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND

        --header "Content-Type: application/octet-stream"

        --data-binary @local_file.txt


        A successful temporary upload link consumption request returns the
        content hash of the uploaded data in JSON format.


        Example succesful temporary upload link consumption response:

        {"content-hash": "599d71033d700ac892a0e48fa61b125d2f5994"}


        An unsuccessful temporary upload link consumption request returns any of
        the following status codes:


        HTTP 400 Bad Request: Content-Type is not one of
        application/octet-stream and text/plain or request is invalid.

        HTTP 409 Conflict: The temporary upload link does not exist or is
        currently unavailable, the upload failed, or another error happened.

        HTTP 410 Gone: The temporary upload link is expired or consumed.


        Example unsuccessful temporary upload link consumption response:

        Temporary upload link has been recently consumed.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"commit_info\": {\n        \"path\":
                \"/Homework/math/Matrices.txt\", \n        \"mode\": \"add\",
                \n        \"autorename\": true, \n        \"mute\": false,
                \n        \"strict_conflict\": false\n    }, \n    \"duration\":
                3600\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                link: https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND
  /2/files/get_thumbnail_v2:
    post:
      tags:
        - files
      summary: get_thumbnail
      operationId: get_thumbnail
      description: >-
        [get_thumbnail](https://www.dropbox.com/developers/documentation/http/documentation#files-get_thumbnail)


        scope: `files.content.read`


        Get a thumbnail for a file.
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "resource": {
                    ".tag": "path", 
                    "path": "/a.docx"
                }, 
                "format": "jpeg", 
                "size": "w64h64", 
                "mode": "strict"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                file_metadata:
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/get_thumbnail_batch:
    post:
      tags:
        - files
      summary: get_thumbnail_batch
      operationId: get_thumbnail_batch
      description: >-
        [get_thumbnail_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-get_thumbnail_batch)


        scope: `files.content.read`


        Get thumbnails for a list of images. We allow up to 25 thumbnails in a
        single batch.

        This method currently supports files with the following file extensions:
        jpg, jpeg, png, tiff, tif, gif and bmp. Photos that are larger than 20MB
        in size won't be converted to a thumbnail.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"path\":
                \"/image.jpg\", \n            \"format\": \"jpeg\",
                \n            \"size\": \"w64h64\", \n            \"mode\":
                \"strict\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: success
                    metadata:
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
                    thumbnail: iVBORw0KGgoAAAANSUhEUgAAAdcAAABrCAMAAAI=
  /2/files/list_folder:
    post:
      tags:
        - files
      summary: list_folder
      operationId: list_folder
      description: >-
        [list_folder](https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder)


        scope: `files.metadata.read`


        Starts returning the contents of a folder. If the result's
        `ListFolderResult.has_more` field is `true`, call `list_folder/continue`
        with the returned `ListFolderResult.cursor` to retrieve more entries.

        If you're using `ListFolderArg.recursive` set to `true` to keep a local
        cache of the contents of a Dropbox account, iterate through each entry
        in order and process them as follows to keep your local state in sync:

        For each `FileMetadata`, store the new entry at the given path in your
        local state. If the required parent folders don't exist yet, create
        them. If there's already something else at the given path, replace it
        and remove all its children.

        For each `FolderMetadata`, store the new entry at the given path in your
        local state. If the required parent folders don't exist yet, create
        them. If there's already something else at the given path, replace it
        but leave the children as they are. Check the new entry's
        `FolderSharingInfo.read_only` and set all its children's read-only
        statuses to match.

        For each `DeletedMetadata`, if your local state has something at the
        given path, remove it and all its children. If there's nothing at the
        given path, ignore this entry.

        Note: `auth.RateLimitError` may be returned if multiple `list_folder` or
        `list_folder/continue` calls with same parameters are made
        simultaneously by same API app for same user. If your app implements
        retry logic, please hold off the retry until the previous request
        finishes.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                recursive:
                  type: boolean
                include_media_info:
                  type: boolean
                include_deleted:
                  type: boolean
                include_has_explicit_shared_members:
                  type: boolean
                include_mounted_folders:
                  type: boolean
                include_non_downloadable_files:
                  type: boolean
              example: 
                path: "Homework/math"
                recursive: false
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: file
                    name: Prime_Numbers.txt
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    path_lower: /homework/math/prime_numbers.txt
                    path_display: /Homework/math/Prime_Numbers.txt
                    sharing_info:
                      read_only: true
                      parent_shared_folder_id: '84528192421'
                      modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                    is_downloadable: true
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                    has_explicit_shared_members: false
                    content_hash: >-
                      e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    file_lock_info:
                      is_lockholder: true
                      lockholder_name: Imaginary User
                      created: '2015-05-12T15:50:38Z'
                  - .tag: folder
                    name: math
                    id: id:a4ayc_80_OEAAAAAAAAAXz
                    path_lower: /homework/math
                    path_display: /Homework/math
                    sharing_info:
                      read_only: false
                      parent_shared_folder_id: '84528192421'
                      traverse_only: false
                      no_access: false
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
                has_more: false
  /2/files/list_folder/continue:
    post:
      tags:
        - files
      summary: list_folder/continue
      operationId: list_folder_continue
      description: >-
        [list_folder/continue](https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder-continue)


        scope: `files.metadata.read`


        Once a cursor has been retrieved from `list_folder`, use this to
        paginate through all files and retrieve updates to the folder, following
        the same rules as documented for `list_folder`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: file
                    name: Prime_Numbers.txt
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    path_lower: /homework/math/prime_numbers.txt
                    path_display: /Homework/math/Prime_Numbers.txt
                    sharing_info:
                      read_only: true
                      parent_shared_folder_id: '84528192421'
                      modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                    is_downloadable: true
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                    has_explicit_shared_members: false
                    content_hash: >-
                      e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    file_lock_info:
                      is_lockholder: true
                      lockholder_name: Imaginary User
                      created: '2015-05-12T15:50:38Z'
                  - .tag: folder
                    name: math
                    id: id:a4ayc_80_OEAAAAAAAAAXz
                    path_lower: /homework/math
                    path_display: /Homework/math
                    sharing_info:
                      read_only: false
                      parent_shared_folder_id: '84528192421'
                      traverse_only: false
                      no_access: false
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
                has_more: false
  /2/files/list_folder/get_latest_cursor:
    post:
      tags:
        - files
      summary: list_folder/get_latest_cursor
      operationId: list_folder/get_latest_cursor
      description: >-
        [list_folder/get_latest_cursor](https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder-get_latest_cursor)


        scope: `files.metadata.read`


        A way to quickly get a cursor for the folder's state. Unlike
        `list_folder`, `list_folder/get_latest_cursor` doesn't return any
        entries. This endpoint is for app which only needs to know about new
        files and modifications and doesn't need to know about files that
        already exist in Dropbox.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/Homework/math\", \n    \"recursive\":
                false, \n    \"include_media_info\": false, \n   
                \"include_deleted\": false, \n   
                \"include_has_explicit_shared_members\": false, \n   
                \"include_mounted_folders\": true, \n   
                \"include_non_downloadable_files\": true\n}"
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/files/list_folder/longpoll:
    post:
      tags:
        - files
      summary: list_folder/longpoll
      operationId: list_folder/longpoll
      description: >-
        [list_folder/longpoll](https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder-longpoll)


        scope: `files.metadata.read`


        A longpoll endpoint to wait for changes on an account. In conjunction
        with `list_folder/continue`, this call gives you a low-latency way to
        monitor an account for file changes. The connection will block until
        there are changes available or a timeout occurs. This endpoint is useful
        mostly for client-side apps. If you're looking for server-side
        notifications, check out our [webhooks
        documentation](https://www.dropbox.com/developers/reference/webhooks).
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\", \n   
                \"timeout\": 30\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                changes: true
  /2/files/list_revisions:
    post:
      tags:
        - files
      summary: list_revisions
      operationId: list_revisions
      description: >-
        [list_revisions](https://www.dropbox.com/developers/documentation/http/documentation#files-list_revisions)


        scope: `files.metadata.read`


        Returns revisions for files based on a file path or a file id. The file
        path or file id is identified from the latest file entry at the given
        file path or id. This end point allows your app to query either by file
        path or file id by setting the mode parameter appropriately.

        In the `ListRevisionsMode.path` (default) mode, all revisions at the
        same file path as the latest file entry are returned. If revisions with
        the same file id are desired, then mode must be set to
        `ListRevisionsMode.id`. The `ListRevisionsMode.id` mode is useful to
        retrieve revisions for a given file across moves or renames.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/root/word.docx\", \n    \"mode\": \"path\",
                \n    \"limit\": 10\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                is_deleted: false
                entries:
                  - name: Prime_Numbers.txt
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    path_lower: /homework/math/prime_numbers.txt
                    path_display: /Homework/math/Prime_Numbers.txt
                    sharing_info:
                      read_only: true
                      parent_shared_folder_id: '84528192421'
                      modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                    is_downloadable: true
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                    has_explicit_shared_members: false
                    content_hash: >-
                      e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    file_lock_info:
                      is_lockholder: true
                      lockholder_name: Imaginary User
                      created: '2015-05-12T15:50:38Z'
  /2/files/lock_file_batch:
    post:
      tags:
        - files
      summary: lock_file_batch
      operationId: lock_file_batch
      description: >-
        [lock_file_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-lock_file_batch)


        scope: `files.content.write`


        Lock the files at the given paths. A locked file will be writable only
        by the lock holder. A successful response indicates that the file has
        been locked. Returns a list of the locked file paths and their metadata
        after this operation.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"path\": \"/John
                Doe/sample/test.pdf\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: success
                    metadata:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
                    lock:
                      content:
                        .tag: single_user
                        created: '2015-05-12T15:50:38Z'
                        lock_holder_account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                        lock_holder_team_id: dbtid:1234abcd
  /2/files/move_v2:
    post:
      tags:
        - files
      summary: move
      operationId: move
      description: >-
        [move](https://www.dropbox.com/developers/documentation/http/documentation#files-move)


        scope: `files.content.write`


        Move a file or folder to a different location in the user's Dropbox.

        If the source path is a folder all its contents will be moved.

        Note that we do not currently support case-only renaming.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"from_path\": \"/Homework/math\", \n    \"to_path\":
                \"/Homework/algebra\", \n    \"allow_shared_folder\": false,
                \n    \"autorename\": false, \n    \"allow_ownership_transfer\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                metadata:
                  .tag: file
                  name: Prime_Numbers.txt
                  id: id:a4ayc_80_OEAAAAAAAAAXw
                  client_modified: '2015-05-12T15:50:38Z'
                  server_modified: '2015-05-12T15:50:38Z'
                  rev: a1c10ce0dd78
                  size: 7212
                  path_lower: /homework/math/prime_numbers.txt
                  path_display: /Homework/math/Prime_Numbers.txt
                  sharing_info:
                    read_only: true
                    parent_shared_folder_id: '84528192421'
                    modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  is_downloadable: true
                  property_groups:
                    - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                      fields:
                        - name: Security Policy
                          value: Confidential
                  has_explicit_shared_members: false
                  content_hash: >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                  file_lock_info:
                    is_lockholder: true
                    lockholder_name: Imaginary User
                    created: '2015-05-12T15:50:38Z'
  /2/files/move_batch_v2:
    post:
      tags:
        - files
      summary: move_batch
      operationId: move_batch
      description: >-
        [move_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-move_batch)


        scope: `files.content.write`


        Move multiple files or folders to different locations at once in the
        user's Dropbox. Note that we do not currently support case-only
        renaming.

        This route will replace `move_batch:1`. The main difference is this
        route will return status for each entry, while `move_batch:1` raises
        failure if any entry fails.

        This route will either finish synchronously, or return a job ID and do
        the async move job in background. Please use `move_batch/check:2` to
        check the job status.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"from_path\":
                \"/Homework/math\", \n            \"to_path\":
                \"/Homework/algebra\"\n        }\n    ], \n    \"autorename\":
                false, \n    \"allow_ownership_transfer\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    success:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/move_batch/check_v2:
    post:
      tags:
        - files
      summary: move_batch/check
      operationId: move_batch/check
      description: >-
        [move_batch/check](https://www.dropbox.com/developers/documentation/http/documentation#files-move_batch-check)


        scope: `files.content.write`


        Returns the status of an asynchronous job for `move_batch:2`. It returns
        list of results for each entry.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    success:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
  /2/files/permanently_delete:
    post:
      tags:
        - files
      summary: permanently_delete
      operationId: permanently_delete
      description: >-
        [permanently_delete](https://www.dropbox.com/developers/documentation/http/documentation#files-permanently_delete)


        scope: `files.permanent_delete`


        Permanently delete the file or folder at a given path (see
        https://www.dropbox.com/en/help/40).

        Note: This endpoint is only available for Dropbox Business apps.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"path\": \"/Homework/math/Prime_Numbers.txt\"\n}"'
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/files/restore:
    post:
      tags:
        - files
      summary: restore
      operationId: restore
      description: >-
        [restore](https://www.dropbox.com/developers/documentation/http/documentation#files-restore)


        scope: `files.content.write`


        Restore a specific revision of a file to the given path.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/root/word.docx\", \n    \"rev\":
                \"a1c10ce0dd78\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/save_url:
    post:
      tags:
        - files
      summary: save_url
      operationId: save_url
      description: >-
        [save_url](https://www.dropbox.com/developers/documentation/http/documentation#files-save_url)


        scope: `files.content.write`


        Save the data from a specified URL into a file in user's Dropbox.

        Note that the transfer from the URL must complete within 5 minutes, or
        the operation will time out and the job will fail.

        If the given path already exists, the file will be renamed to avoid the
        conflict (e.g. myfile (1).txt).
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/a.txt\", \n    \"url\":
                \"http://example.com/a.txt\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/save_url/check_job_status:
    post:
      tags:
        - files
      summary: save_url/check_job_status
      operationId: save_url/check_job_status
      description: >-
        [save_url/check_job_status](https://www.dropbox.com/developers/documentation/http/documentation#files-save_url-check_job_status)


        scope: `files.content.write`


        Check the status of a `save_url` job.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: in_progress
  /2/files/search_v2:
    post:
      tags:
        - files
      summary: search
      operationId: search
      description: >-
        [search](https://www.dropbox.com/developers/documentation/http/documentation#files-search)


        scope: `files.metadata.read`


        Searches for files and folders.

        Note: `search:2` along with `search/continue:2` can only be used to
        retrieve a maximum of 10,000 matches.

        Recent changes may not immediately be reflected in search results due to
        a short delay in indexing. Duplicate results may be returned across
        pages. Some results may not be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"query\": \"cat\", \n    \"include_highlights\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                  - metadata:
                      .tag: metadata
                      metadata:
                        .tag: file
                        name: Prime_Numbers.txt
                        id: id:a4ayc_80_OEAAAAAAAAAXw
                        client_modified: '2015-05-12T15:50:38Z'
                        server_modified: '2015-05-12T15:50:38Z'
                        rev: a1c10ce0dd78
                        size: 7212
                        path_lower: /homework/math/prime_numbers.txt
                        path_display: /Homework/math/Prime_Numbers.txt
                        sharing_info:
                          read_only: true
                          parent_shared_folder_id: '84528192421'
                          modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                        is_downloadable: true
                        property_groups:
                          - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                            fields:
                              - name: Security Policy
                                value: Confidential
                        has_explicit_shared_members: false
                        content_hash: >-
                          e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                        file_lock_info:
                          is_lockholder: true
                          lockholder_name: Imaginary User
                          created: '2015-05-12T15:50:38Z'
                has_more: false
  /2/files/search/continue_v2:
    post:
      tags:
        - files
      summary: search/continue
      operationId: search/continue
      description: >-
        [search/continue](https://www.dropbox.com/developers/documentation/http/documentation#files-search-continue)


        scope: `files.metadata.read`


        Fetches the next page of search results returned from `search:2`.

        Note: `search:2` along with `search/continue:2` can only be used to
        retrieve a maximum of 10,000 matches.

        Recent changes may not immediately be reflected in search results due to
        a short delay in indexing. Duplicate results may be returned across
        pages. Some results may not be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                  - metadata:
                      .tag: metadata
                      metadata:
                        .tag: file
                        name: Prime_Numbers.txt
                        id: id:a4ayc_80_OEAAAAAAAAAXw
                        client_modified: '2015-05-12T15:50:38Z'
                        server_modified: '2015-05-12T15:50:38Z'
                        rev: a1c10ce0dd78
                        size: 7212
                        path_lower: /homework/math/prime_numbers.txt
                        path_display: /Homework/math/Prime_Numbers.txt
                        sharing_info:
                          read_only: true
                          parent_shared_folder_id: '84528192421'
                          modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                        is_downloadable: true
                        property_groups:
                          - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                            fields:
                              - name: Security Policy
                                value: Confidential
                        has_explicit_shared_members: false
                        content_hash: >-
                          e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                        file_lock_info:
                          is_lockholder: true
                          lockholder_name: Imaginary User
                          created: '2015-05-12T15:50:38Z'
                has_more: false
  /2/files/unlock_file_batch:
    post:
      tags:
        - files
      summary: unlock_file_batch
      operationId: unlock_file_batch
      description: >-
        [unlock_file_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-unlock_file_batch)


        scope: `files.content.write`


        Unlock the files at the given paths. A locked file can only be unlocked
        by the lock holder or, if a business account, a team admin. A successful
        response indicates that the file has been unlocked. Returns a list of
        the unlocked file paths and their metadata after this operation.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"path\": \"/John
                Doe/sample/test.pdf\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - .tag: success
                    metadata:
                      .tag: file
                      name: Prime_Numbers.txt
                      id: id:a4ayc_80_OEAAAAAAAAAXw
                      client_modified: '2015-05-12T15:50:38Z'
                      server_modified: '2015-05-12T15:50:38Z'
                      rev: a1c10ce0dd78
                      size: 7212
                      path_lower: /homework/math/prime_numbers.txt
                      path_display: /Homework/math/Prime_Numbers.txt
                      sharing_info:
                        read_only: true
                        parent_shared_folder_id: '84528192421'
                        modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      is_downloadable: true
                      property_groups:
                        - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                          fields:
                            - name: Security Policy
                              value: Confidential
                      has_explicit_shared_members: false
                      content_hash: >-
                        e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                      file_lock_info:
                        is_lockholder: true
                        lockholder_name: Imaginary User
                        created: '2015-05-12T15:50:38Z'
                    lock:
                      content:
                        .tag: single_user
                        created: '2015-05-12T15:50:38Z'
                        lock_holder_account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                        lock_holder_team_id: dbtid:1234abcd
  /2/files/upload:
    post:
      tags:
        - files
      summary: upload
      operationId: upload
      description: >-
        [upload](https://www.dropbox.com/developers/documentation/http/documentation#files-upload)


        scope: `files.content.write`


        Create a new file with the contents provided in the request.

        Do not use this to upload a file larger than 150 MB. Instead, create an
        upload session with `upload_session/start`.

        Calls to this endpoint will count as data transport calls for any
        Dropbox Business teams with a limit on the number of data transport
        calls allowed per month. For more information, see the [Data transport
        limit
        page](https://www.dropbox.com/developers/reference/data-transport-limit).      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "path": "/Homework/math/Matrices.txt", 
                "mode": "add", 
                "autorename": true, 
                "mute": false, 
                "strict_conflict": false
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/upload_session/append_v2:
    post:
      tags:
        - files
      summary: upload_session/append
      operationId: upload_session/append
      description: >-
        [upload_session/append](https://www.dropbox.com/developers/documentation/http/documentation#files-upload_session-append)


        scope: `files.content.write`


        Append more data to an upload session.

        When the parameter close is set, this call will close the session.

        A single request should not upload more than 150 MB. The maximum size of
        a file one can upload to an upload session is 350 GB.

        Calls to this endpoint will count as data transport calls for any
        Dropbox Business teams with a limit on the number of data transport
        calls allowed per month. For more information, see the [Data transport
        limit
        page](https://www.dropbox.com/developers/reference/data-transport-limit).      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "cursor": {
                    "session_id": "1234faaf0678bcde", 
                    "offset": 0
                }, 
                "close": false
            }
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/files/upload_session/finish:
    post:
      tags:
        - files
      summary: upload_session/finish
      operationId: upload_session/finish
      description: >-
        [upload_session/finish](https://www.dropbox.com/developers/documentation/http/documentation#files-upload_session-finish)


        scope: `files.content.write`


        Finish an upload session and save the uploaded data to the given file
        path.

        A single request should not upload more than 150 MB. The maximum size of
        a file one can upload to an upload session is 350 GB.

        Calls to this endpoint will count as data transport calls for any
        Dropbox Business teams with a limit on the number of data transport
        calls allowed per month. For more information, see the [Data transport
        limit
        page](https://www.dropbox.com/developers/reference/data-transport-limit).      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "cursor": {
                    "session_id": "1234faaf0678bcde", 
                    "offset": 0
                }, 
                "commit": {
                    "path": "/Homework/math/Matrices.txt", 
                    "mode": "add", 
                    "autorename": true, 
                    "mute": false, 
                    "strict_conflict": false
                }
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Prime_Numbers.txt
                id: id:a4ayc_80_OEAAAAAAAAAXw
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                path_lower: /homework/math/prime_numbers.txt
                path_display: /Homework/math/Prime_Numbers.txt
                sharing_info:
                  read_only: true
                  parent_shared_folder_id: '84528192421'
                  modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                is_downloadable: true
                property_groups:
                  - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                    fields:
                      - name: Security Policy
                        value: Confidential
                has_explicit_shared_members: false
                content_hash: >-
                  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                file_lock_info:
                  is_lockholder: true
                  lockholder_name: Imaginary User
                  created: '2015-05-12T15:50:38Z'
  /2/files/upload_session/finish_batch:
    post:
      tags:
        - files
      summary: upload_session/finish_batch
      operationId: upload_session/finish_batch
      description: >-
        [upload_session/finish_batch](https://www.dropbox.com/developers/documentation/http/documentation#files-upload_session-finish_batch)


        scope: `files.content.write`


        This route helps you commit many files at once into a user's Dropbox.
        Use `upload_session/start` and `upload_session/append:2` to upload file
        contents. We recommend uploading many files in parallel to increase
        throughput. Once the file contents have been uploaded, rather than
        calling `upload_session/finish`, use this route to finish all your
        upload sessions in a single request.

        `UploadSessionStartArg.close` or `UploadSessionAppendArg.close` needs to
        be true for the last `upload_session/start` or `upload_session/append:2`
        call. The maximum size of a file one can upload to an upload session is
        350 GB.

        This route will return a job_id immediately and do the async commit job
        in background. Use `upload_session/finish_batch/check` to check the job
        status.

        For the same account, this route should be executed serially. That means
        you should not start the next job before current job finishes. We allow
        up to 1000 entries in a single request.

        Calls to this endpoint will count as data transport calls for any
        Dropbox Business teams with a limit on the number of data transport
        calls allowed per month. For more information, see the [Data transport
        limit
        page](https://www.dropbox.com/developers/reference/data-transport-limit).
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"entries\": [\n        {\n            \"cursor\":
                {\n                \"session_id\": \"1234faaf0678bcde\",
                \n                \"offset\": 0\n            }, \n           
                \"commit\": {\n                \"path\":
                \"/Homework/math/Matrices.txt\", \n                \"mode\":
                \"add\", \n                \"autorename\": true,
                \n                \"mute\": false, \n               
                \"strict_conflict\": false\n            }\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    name: Prime_Numbers.txt
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    path_lower: /homework/math/prime_numbers.txt
                    path_display: /Homework/math/Prime_Numbers.txt
                    sharing_info:
                      read_only: true
                      parent_shared_folder_id: '84528192421'
                      modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                    is_downloadable: true
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                    has_explicit_shared_members: false
                    content_hash: >-
                      e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    file_lock_info:
                      is_lockholder: true
                      lockholder_name: Imaginary User
                      created: '2015-05-12T15:50:38Z'
  /2/files/upload_session/finish_batch/check:
    post:
      tags:
        - files
      summary: upload_session/finish_batch/check
      operationId: upload_session/finish_batch/check
      description: >-
        [upload_session/finish_batch/check](https://www.dropbox.com/developers/documentation/http/documentation#files-upload_session-finish_batch-check)


        scope: `files.content.write`


        Returns the status of an asynchronous job for
        `upload_session/finish_batch`. If success, it returns list of result for
        each entry.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                entries:
                  - .tag: success
                    name: Prime_Numbers.txt
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    path_lower: /homework/math/prime_numbers.txt
                    path_display: /Homework/math/Prime_Numbers.txt
                    sharing_info:
                      read_only: true
                      parent_shared_folder_id: '84528192421'
                      modified_by: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                    is_downloadable: true
                    property_groups:
                      - template_id: ptid:1a5n2i6d3OYEAAAAAAAAAYa
                        fields:
                          - name: Security Policy
                            value: Confidential
                    has_explicit_shared_members: false
                    content_hash: >-
                      e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    file_lock_info:
                      is_lockholder: true
                      lockholder_name: Imaginary User
                      created: '2015-05-12T15:50:38Z'
  /2/files/upload_session/start:
    post:
      tags:
        - files
      summary: upload_session/start
      operationId: upload_session/start
      description: >-
        [upload_session/start](https://www.dropbox.com/developers/documentation/http/documentation#files-upload_session-start)


        scope: `files.content.write`


        Upload sessions allow you to upload a single file in one or more
        requests, for example where the size of the file is greater than 150
        MB.  This call starts a new upload session with the given data. You can
        then use `upload_session/append:2` to add more data and
        `upload_session/finish` to save all the data to a file in Dropbox.

        A single request should not upload more than 150 MB. The maximum size of
        a file one can upload to an upload session is 350 GB.

        An upload session can be used for a maximum of 48 hours. Attempting to
        use an `UploadSessionStartResult.session_id` with
        `upload_session/append:2` or `upload_session/finish` more than 48 hours
        after its creation will return a `UploadSessionLookupError.not_found`.

        Calls to this endpoint will count as data transport calls for any
        Dropbox Business teams with a limit on the number of data transport
        calls allowed per month. For more information, see the [Data transport
        limit
        page](https://www.dropbox.com/developers/reference/data-transport-limit)      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "close": false
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                session_id: 1234faaf0678bcde
  /2/sharing/add_file_member:
    post:
      tags:
        - sharing
      summary: add_file_member
      operationId: add_file_member
      description: >-
        [add_file_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-add_file_member)


        scope: `sharing.write`


        Adds specified members to a file.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\", \n   
                \"members\": [\n        {\n            \".tag\": \"email\",
                \n            \"email\": \"justin@example.com\"\n        }\n   
                ], \n    \"custom_message\": \"This is a custom message about
                ACME.doc\", \n    \"quiet\": false, \n    \"access_level\":
                \"viewer\", \n    \"add_message_as_comment\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - member:
                    .tag: email
                    email: justin@example.com
                  result:
                    .tag: success
  /2/sharing/add_folder_member:
    post:
      tags:
        - sharing
      summary: add_folder_member
      operationId: add_folder_member
      description: >-
        [add_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-add_folder_member)


        scope: `sharing.write`


        Allows an owner or editor (if the ACL update policy allows) of a shared
        folder to add another member.

        For the new member to get access to all the functionality for this
        folder, you will need to call `mount_folder` on their behalf.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"members\": [\n        {\n            \"member\":
                {\n                \".tag\": \"email\", \n               
                \"email\": \"justin@example.com\"\n            }, \n           
                \"access_level\": \"editor\"\n        }, \n       
                {\n            \"member\": {\n                \".tag\":
                \"dropbox_id\", \n                \"dropbox_id\":
                \"dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q\"\n            },
                \n            \"access_level\": \"viewer\"\n        }\n    ],
                \n    \"quiet\": false, \n    \"custom_message\":
                \"Documentation for launch day\"\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/check_job_status:
    post:
      tags:
        - sharing
      summary: check_job_status
      operationId: check_job_status
      description: >-
        [check_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_job_status)


        scope: `sharing.write`


        Returns the status of an asynchronous job.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: in_progress
  /2/sharing/check_remove_member_job_status:
    post:
      tags:
        - sharing
      summary: check_remove_member_job_status
      operationId: check_remove_member_job_status
      description: >-
        [check_remove_member_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_remove_member_job_status)


        scope: `sharing.write`


        Returns the status of an asynchronous job for sharing a folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
  /2/sharing/check_share_job_status:
    post:
      tags:
        - sharing
      summary: check_share_job_status
      operationId: check_share_job_status
      description: >-
        [check_share_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_share_job_status)


        scope: `sharing.write`


        Returns the status of an asynchronous job for sharing a folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"async_job_id\": \"34g93hh34h04y384084\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/sharing/get_file_metadata:
    post:
      tags:
        - sharing
      summary: get_file_metadata
      operationId: get_file_metadata
      description: >-
        [get_file_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_file_metadata)


        scope: `sharing.read`


        Returns shared file metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\", \n   
                \"actions\": []\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: id:3kmLmQFnf1AAAAAAAAAAAw
                name: file.txt
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fi/fir9vjelf
                access_type:
                  .tag: viewer
                owner_display_names:
                  - Jane Doe
                owner_team:
                  id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                  name: Acme, Inc.
                path_display: /dir/file.txt
                path_lower: /dir/file.txt
                permissions: []
                time_invited: '2016-01-20T00:00:00Z'
  /2/sharing/get_file_metadata/batch:
    post:
      tags:
        - sharing
      summary: get_file_metadata/batch
      operationId: get_file_metadata/batch
      description: >-
        [get_file_metadata/batch](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_file_metadata-batch)


        scope: `sharing.read`


        Returns shared file metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"files\": [\n        \"id:3kmLmQFnf1AAAAAAAAAAAw\",
                \n        \"id:VvTaJu2VZzAAAAAAAAAADQ\"\n    ], \n   
                \"actions\": []\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - file: id:3kmLmQFnf1AAAAAAAAAAAw
                  result:
                    .tag: metadata
                    id: id:3kmLmQFnf1AAAAAAAAAAAw
                    name: file.txt
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fi/fir9vjelf
                    access_type:
                      .tag: viewer
                    owner_display_names:
                      - Jane Doe
                    owner_team:
                      id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                      name: Acme, Inc.
                    path_display: /dir/file.txt
                    path_lower: /dir/file.txt
                    permissions: []
                    time_invited: '2016-01-20T00:00:00Z'
  /2/sharing/get_folder_metadata:
    post:
      tags:
        - sharing
      summary: get_folder_metadata
      operationId: get_folder_metadata
      description: >-
        [get_folder_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_folder_metadata)


        scope: `sharing.read`


        Returns shared folder metadata by its folder ID.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"actions\": []\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/sharing/get_shared_link_file:
    post:
      tags:
        - sharing
      summary: get_shared_link_file
      operationId: get_shared_link_file
      description: >-
        [get_shared_link_file](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_shared_link_file)


        scope: `sharing.read`


        Download the shared link's file from a user's Dropbox.      
      parameters:
        - name: Dropbox-API-Arg
          in: header
          schema:
            type: string
          example: |-
            {
                "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0", 
                "path": "/Prime_Numbers.txt"
            }
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: file
                url: >-
                  https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0
                name: Prime_Numbers.txt
                link_permissions:
                  can_revoke: false
                  resolved_visibility:
                    .tag: public
                  revoke_failure_reason:
                    .tag: owner_only
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                id: id:a4ayc_80_OEAAAAAAAAAXw
                path_lower: /homework/math/prime_numbers.txt
                team_member_info:
                  team_info:
                    id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                    name: Acme, Inc.
                  display_name: Roger Rabbit
                  member_id: dbmid:abcd1234
  /2/sharing/get_shared_link_metadata:
    post:
      tags:
        - sharing
      summary: get_shared_link_metadata
      operationId: get_shared_link_metadata
      description: >-
        [get_shared_link_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_shared_link_metadata)


        scope: `sharing.read`


        Get the shared link's metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"url\":
                \"https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0\",
                \n    \"path\": \"/Prime_Numbers.txt\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: file
                url: >-
                  https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0
                name: Prime_Numbers.txt
                link_permissions:
                  can_revoke: false
                  resolved_visibility:
                    .tag: public
                  revoke_failure_reason:
                    .tag: owner_only
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                id: id:a4ayc_80_OEAAAAAAAAAXw
                path_lower: /homework/math/prime_numbers.txt
                team_member_info:
                  team_info:
                    id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                    name: Acme, Inc.
                  display_name: Roger Rabbit
                  member_id: dbmid:abcd1234
  /2/sharing/list_file_members:
    post:
      tags:
        - sharing
      summary: list_file_members
      operationId: list_file_members
      description: >-
        [list_file_members](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members)


        scope: `sharing.read`


        Use to obtain the members who have been invited to a file, both
        inherited and uninherited members.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\", \n   
                \"include_inherited\": true, \n    \"limit\": 100\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                users:
                  - access_type:
                      .tag: owner
                    user:
                      account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      email: bob@example.com
                      display_name: Robert Smith
                      same_team: true
                      team_member_id: dbmid:abcd1234
                    permissions: []
                    is_inherited: false
                    time_last_seen: '2016-01-20T00:00:00Z'
                    platform_type:
                      .tag: unknown
                groups:
                  - access_type:
                      .tag: editor
                    group:
                      group_name: Test group
                      group_id: g:e2db7665347abcd600000000001a2b3c
                      group_management_type:
                        .tag: user_managed
                      group_type:
                        .tag: user_managed
                      is_member: false
                      is_owner: false
                      same_team: true
                      member_count: 10
                    permissions: []
                    is_inherited: false
                invitees:
                  - access_type:
                      .tag: viewer
                    invitee:
                      .tag: email
                      email: jessica@example.com
                    permissions: []
                    is_inherited: false
  /2/sharing/list_file_members/batch:
    post:
      tags:
        - sharing
      summary: list_file_members/batch
      operationId: list_file_members/batch
      description: >-
        [list_file_members/batch](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members-batch)


        scope: `sharing.read`


        Get members of multiple files at once. The arguments to this route are
        more limited, and the limit on query result size per file is more
        strict. To customize the results more, use the individual file endpoint.

        Inherited users and groups are not included in the result, and
        permissions are not returned for this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"files\": [\n        \"id:3kmLmQFnf1AAAAAAAAAAAw\",
                \n        \"id:VvTaJu2VZzAAAAAAAAAADQ\"\n    ], \n    \"limit\":
                10\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - file: id:3kmLmQFnf1AAAAAAAAAAAw
                  result:
                    .tag: result
                    members:
                      users:
                        - access_type:
                            .tag: owner
                          user:
                            account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                            email: bob@example.com
                            display_name: Robert Smith
                            same_team: true
                            team_member_id: dbmid:abcd1234
                          permissions: []
                          is_inherited: false
                          time_last_seen: '2016-01-20T00:00:00Z'
                          platform_type:
                            .tag: unknown
                      groups:
                        - access_type:
                            .tag: editor
                          group:
                            group_name: Test group
                            group_id: g:e2db7665347abcd600000000001a2b3c
                            group_management_type:
                              .tag: user_managed
                            group_type:
                              .tag: user_managed
                            is_member: false
                            is_owner: false
                            same_team: true
                            member_count: 10
                          permissions: []
                          is_inherited: false
                      invitees:
                        - access_type:
                            .tag: viewer
                          invitee:
                            .tag: email
                            email: jessica@example.com
                          permissions: []
                          is_inherited: false
                    member_count: 3
  /2/sharing/list_file_members/continue:
    post:
      tags:
        - sharing
      summary: list_file_members/continue
      operationId: list_file_members/continue
      description: >-
        [list_file_members/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members-continue)


        scope: `sharing.read`


        Once a cursor has been retrieved from `list_file_members` or
        `list_file_members/batch`, use this to paginate through all shared file
        members.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                users:
                  - access_type:
                      .tag: owner
                    user:
                      account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      email: bob@example.com
                      display_name: Robert Smith
                      same_team: true
                      team_member_id: dbmid:abcd1234
                    permissions: []
                    is_inherited: false
                    time_last_seen: '2016-01-20T00:00:00Z'
                    platform_type:
                      .tag: unknown
                groups:
                  - access_type:
                      .tag: editor
                    group:
                      group_name: Test group
                      group_id: g:e2db7665347abcd600000000001a2b3c
                      group_management_type:
                        .tag: user_managed
                      group_type:
                        .tag: user_managed
                      is_member: false
                      is_owner: false
                      same_team: true
                      member_count: 10
                    permissions: []
                    is_inherited: false
                invitees:
                  - access_type:
                      .tag: viewer
                    invitee:
                      .tag: email
                      email: jessica@example.com
                    permissions: []
                    is_inherited: false
  /2/sharing/list_folder_members/continue:
    post:
      tags:
        - sharing
      summary: list_folder_members/continue
      operationId: list_folder_members/continue
      description: >-
        [list_folder_members/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folder_members-continue)


        scope: `sharing.read`


        Once a cursor has been retrieved from `list_folder_members`, use this to
        paginate through all shared folder members.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                users:
                  - access_type:
                      .tag: owner
                    user:
                      account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                      email: bob@example.com
                      display_name: Robert Smith
                      same_team: true
                      team_member_id: dbmid:abcd1234
                    permissions: []
                    is_inherited: false
                groups:
                  - access_type:
                      .tag: editor
                    group:
                      group_name: Test group
                      group_id: g:e2db7665347abcd600000000001a2b3c
                      group_management_type:
                        .tag: user_managed
                      group_type:
                        .tag: user_managed
                      is_member: false
                      is_owner: false
                      same_team: true
                      member_count: 10
                    permissions: []
                    is_inherited: false
                invitees:
                  - access_type:
                      .tag: viewer
                    invitee:
                      .tag: email
                      email: jessica@example.com
                    permissions: []
                    is_inherited: false
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/list_folders:
    post:
      tags:
        - sharing
      summary: list_folders
      operationId: list_folders
      description: >-
        [list_folders](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folders)


        scope: `sharing.read`


        Return the list of all shared folders the current user has access to.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"limit\": 100, \n    \"actions\": []\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - access_type:
                      .tag: owner
                    is_inside_team_folder: false
                    is_team_folder: false
                    name: dir
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                    shared_folder_id: '84528192421'
                    time_invited: '2016-01-20T00:00:00Z'
                    path_lower: /dir
                    link_metadata:
                      audience_options:
                        - .tag: public
                        - .tag: team
                        - .tag: members
                      current_audience:
                        .tag: public
                      link_permissions:
                        - action:
                            .tag: change_audience
                          allow: true
                      password_protected: false
                      url: ''
                    permissions: []
                    access_inheritance:
                      .tag: inherit
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/list_folders/continue:
    post:
      tags:
        - sharing
      summary: list_folders/continue
      operationId: list_folders/continue
      description: >-
        [list_folders/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folders-continue)


        scope: `sharing.read`


        Once a cursor has been retrieved from `list_folders`, use this to
        paginate through all shared folders. The cursor must come from a
        previous call to `list_folders` or `list_folders/continue`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - access_type:
                      .tag: owner
                    is_inside_team_folder: false
                    is_team_folder: false
                    name: dir
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                    shared_folder_id: '84528192421'
                    time_invited: '2016-01-20T00:00:00Z'
                    path_lower: /dir
                    link_metadata:
                      audience_options:
                        - .tag: public
                        - .tag: team
                        - .tag: members
                      current_audience:
                        .tag: public
                      link_permissions:
                        - action:
                            .tag: change_audience
                          allow: true
                      password_protected: false
                      url: ''
                    permissions: []
                    access_inheritance:
                      .tag: inherit
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/list_mountable_folders:
    post:
      tags:
        - sharing
      summary: list_mountable_folders
      operationId: list_mountable_folders
      description: >-
        [list_mountable_folders](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_mountable_folders)


        scope: `sharing.read`


        Return the list of all shared folders the current user can mount or
        unmount.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"limit\": 100, \n    \"actions\": []\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - access_type:
                      .tag: owner
                    is_inside_team_folder: false
                    is_team_folder: false
                    name: dir
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                    shared_folder_id: '84528192421'
                    time_invited: '2016-01-20T00:00:00Z'
                    path_lower: /dir
                    link_metadata:
                      audience_options:
                        - .tag: public
                        - .tag: team
                        - .tag: members
                      current_audience:
                        .tag: public
                      link_permissions:
                        - action:
                            .tag: change_audience
                          allow: true
                      password_protected: false
                      url: ''
                    permissions: []
                    access_inheritance:
                      .tag: inherit
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/list_mountable_folders/continue:
    post:
      tags:
        - sharing
      summary: list_mountable_folders/continue
      operationId: list_mountable_folders/continue
      description: >-
        [list_mountable_folders/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_mountable_folders-continue)


        scope: `sharing.read`


        Once a cursor has been retrieved from `list_mountable_folders`, use this
        to paginate through all mountable shared folders. The cursor must come
        from a previous call to `list_mountable_folders` or
        `list_mountable_folders/continue`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - access_type:
                      .tag: owner
                    is_inside_team_folder: false
                    is_team_folder: false
                    name: dir
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                    shared_folder_id: '84528192421'
                    time_invited: '2016-01-20T00:00:00Z'
                    path_lower: /dir
                    link_metadata:
                      audience_options:
                        - .tag: public
                        - .tag: team
                        - .tag: members
                      current_audience:
                        .tag: public
                      link_permissions:
                        - action:
                            .tag: change_audience
                          allow: true
                      password_protected: false
                      url: ''
                    permissions: []
                    access_inheritance:
                      .tag: inherit
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/list_received_files:
    post:
      tags:
        - sharing
      summary: list_received_files
      operationId: list_received_files
      description: >-
        [list_received_files](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_received_files)


        scope: `sharing.read`


        Returns a list of all files shared with current user.
         Does not include files the user has received via shared folders, and does  not include unclaimed invitations.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"limit\": 100, \n    \"actions\": []\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - id: id:3kmLmQFnf1AAAAAAAAAAAw
                    name: file.txt
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fi/fir9vjelf
                    access_type:
                      .tag: viewer
                    owner_display_names:
                      - Jane Doe
                    owner_team:
                      id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                      name: Acme, Inc.
                    path_display: /dir/file.txt
                    path_lower: /dir/file.txt
                    permissions: []
                    time_invited: '2016-01-20T00:00:00Z'
                cursor: >-
                  AzJJbGlzdF90eXBdofe9c3RPbGlzdGFyZ3NfYnlfZ2lkMRhcbric7Rdog9cmV2aXNpb24H3Qf6o1fkHxQ
  /2/sharing/list_received_files/continue:
    post:
      tags:
        - sharing
      summary: list_received_files/continue
      operationId: list_received_files/continue
      description: >-
        [list_received_files/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_received_files-continue)


        scope: `sharing.read`


        Get more results with a cursor from `list_received_files`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"AzJJbGlzdF90eXBdofe9c3RPbGlzdGFyZ3NfYnlfZ2lkMRhcbric7Rdog9emfGRlc2MCRWxpbWl0BGRId\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                entries:
                  - id: id:3kmLmQFnf1AAAAAAAAAAAw
                    name: file.txt
                    policy:
                      acl_update_policy:
                        .tag: owner
                      shared_link_policy:
                        .tag: anyone
                      member_policy:
                        .tag: anyone
                      resolved_member_policy:
                        .tag: team
                    preview_url: https://www.dropbox.com/scl/fi/fir9vjelf
                    access_type:
                      .tag: viewer
                    owner_display_names:
                      - Jane Doe
                    owner_team:
                      id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                      name: Acme, Inc.
                    path_display: /dir/file.txt
                    path_lower: /dir/file.txt
                    permissions: []
                    time_invited: '2016-01-20T00:00:00Z'
                cursor: >-
                  AzJJbGlzdF90eXBdofe9c3RPbGlzdGFyZ3NfYnlfZ2lkMRhcbric7Rdog9cmV2aXNpb24H3Qf6o1fkHxQ
  /2/sharing/list_shared_links:
    post:
      tags:
        - sharing
      summary: list_shared_links
      operationId: list_shared_links
      description: >-
        [list_shared_links](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_shared_links)


        scope: `sharing.read`


        List shared links of this user.

        If no path is given, returns a list of all shared links for the current
        user.

        If a non-empty path is given, returns a list of all shared links that
        allow access to the given path - direct links to the given path and
        links to parent folders of the given path. Links to parent folders can
        be suppressed by setting direct_only to true.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"cursor\":
                \"ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  - .tag: file
                    url: >-
                      https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0
                    name: Prime_Numbers.txt
                    link_permissions:
                      can_revoke: false
                      resolved_visibility:
                        .tag: public
                      revoke_failure_reason:
                        .tag: owner_only
                    client_modified: '2015-05-12T15:50:38Z'
                    server_modified: '2015-05-12T15:50:38Z'
                    rev: a1c10ce0dd78
                    size: 7212
                    id: id:a4ayc_80_OEAAAAAAAAAXw
                    path_lower: /homework/math/prime_numbers.txt
                    team_member_info:
                      team_info:
                        id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                        name: Acme, Inc.
                      display_name: Roger Rabbit
                      member_id: dbmid:abcd1234
                has_more: true
                cursor: ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu
  /2/sharing/modify_shared_link_settings:
    post:
      tags:
        - sharing
      summary: modify_shared_link_settings
      operationId: modify_shared_link_settings
      description: >-
        [modify_shared_link_settings](https://www.dropbox.com/developers/documentation/http/documentation#sharing-modify_shared_link_settings)


        scope: `sharing.write`


        Modify the shared link's settings.

        If the requested visibility conflict with the shared links policy of the
        team or the shared folder (in case the linked file is part of a shared
        folder) then the `LinkPermissions.resolved_visibility` of the returned
        `SharedLinkMetadata` will reflect the actual visibility of the shared
        link and the `LinkPermissions.requested_visibility` will reflect the
        requested visibility.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"url\":
                \"https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0\",
                \n    \"settings\": {\n        \"requested_visibility\":
                \"public\", \n        \"audience\": \"public\", \n       
                \"access\": \"viewer\"\n    }, \n    \"remove_expiration\":
                false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: file
                url: >-
                  https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0
                name: Prime_Numbers.txt
                link_permissions:
                  can_revoke: false
                  resolved_visibility:
                    .tag: public
                  revoke_failure_reason:
                    .tag: owner_only
                client_modified: '2015-05-12T15:50:38Z'
                server_modified: '2015-05-12T15:50:38Z'
                rev: a1c10ce0dd78
                size: 7212
                id: id:a4ayc_80_OEAAAAAAAAAXw
                path_lower: /homework/math/prime_numbers.txt
                team_member_info:
                  team_info:
                    id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                    name: Acme, Inc.
                  display_name: Roger Rabbit
                  member_id: dbmid:abcd1234
  /2/sharing/mount_folder:
    post:
      tags:
        - sharing
      summary: mount_folder
      operationId: mount_folder
      description: >-
        [mount_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-mount_folder)


        scope: `sharing.write`


        The current user mounts the designated folder.

        Mount a shared folder for a user after they have been added as a member.
        Once mounted, the shared folder will appear in their Dropbox.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"shared_folder_id\": \"84528192421\"\n}"'
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/sharing/relinquish_file_membership:
    post:
      tags:
        - sharing
      summary: relinquish_file_membership
      operationId: relinquish_file_membership
      description: >-
        [relinquish_file_membership](https://www.dropbox.com/developers/documentation/http/documentation#sharing-relinquish_file_membership)


        scope: `sharing.write`


        The current user relinquishes their membership in the designated file.
        Note that the current user may still have inherited access to this file
        through the parent folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\"\n}"'
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/relinquish_folder_membership:
    post:
      tags:
        - sharing
      summary: relinquish_folder_membership
      operationId: relinquish_folder_membership
      description: >-
        [relinquish_folder_membership](https://www.dropbox.com/developers/documentation/http/documentation#sharing-relinquish_folder_membership)


        scope: `sharing.write`


        The current user relinquishes their membership in the designated shared
        folder and will no longer have access to the folder.  A folder owner
        cannot relinquish membership in their own folder.

        This will run synchronously if leave_a_copy is false, and asynchronously
        if leave_a_copy is true.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"leave_a_copy\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
  /2/sharing/remove_file_member_2:
    post:
      tags:
        - sharing
      summary: remove_file_member_2
      operationId: remove_file_member_2
      description: >-
        [remove_file_member_2](https://www.dropbox.com/developers/documentation/http/documentation#sharing-remove_file_member_2)


        scope: `sharing.write`


        Removes a specified member from the file.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\", \n   
                \"member\": {\n        \".tag\": \"email\", \n        \"email\":
                \"justin@example.com\"\n    }\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: other
  /2/sharing/remove_folder_member:
    post:
      tags:
        - sharing
      summary: remove_folder_member
      operationId: remove_folder_member
      description: >-
        [remove_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-remove_folder_member)


        scope: `sharing.write`


        Allows an owner or editor (if the ACL update policy allows) of a shared
        folder to remove another member.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n    \"member\":
                {\n        \".tag\": \"email\", \n        \"email\":
                \"justin@example.com\"\n    }, \n    \"leave_a_copy\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: async_job_id
                async_job_id: 34g93hh34h04y384084
  /2/sharing/revoke_shared_link:
    post:
      tags:
        - sharing
      summary: revoke_shared_link
      operationId: revoke_shared_link
      description: >-
        [revoke_shared_link](https://www.dropbox.com/developers/documentation/http/documentation#sharing-revoke_shared_link)


        scope: `sharing.write`


        Revoke a shared link.

        Note that even after revoking a shared link to a file, the file may be
        accessible if there are shared links leading to any of the file parent
        folders. To list all shared links that enable access to a specific file,
        you can use the `list_shared_links` with the file as the
        `ListSharedLinksArg.path` argument.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"url\":
                \"https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0\"\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/set_access_inheritance:
    post:
      tags:
        - sharing
      summary: set_access_inheritance
      operationId: set_access_inheritance
      description: >-
        [set_access_inheritance](https://www.dropbox.com/developers/documentation/http/documentation#sharing-set_access_inheritance)


        scope: `sharing.write`


        Change the inheritance policy of an existing Shared Folder. Only
        permitted for shared folders in a shared team root.

        If a `ShareFolderLaunch.async_job_id` is returned, you'll need to call
        `check_share_job_status` until the action completes to get the metadata
        for the folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"access_inheritance\": \"inherit\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/sharing/share_folder:
    post:
      tags:
        - sharing
      summary: share_folder
      operationId: share_folder
      description: >-
        [share_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-share_folder)


        scope: `sharing.write`


        Share a folder with collaborators.

        Most sharing will be completed synchronously. Large folders will be
        completed asynchronously. To make testing the async case repeatable, set
        `ShareFolderArg.force_async`.

        If a `ShareFolderLaunch.async_job_id` is returned, you'll need to call
        `check_share_job_status` until the action completes to get the metadata
        for the folder.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"path\": \"/example/workspace\", \n   
                \"acl_update_policy\": \"editors\", \n    \"force_async\":
                false, \n    \"member_policy\": \"team\", \n   
                \"shared_link_policy\": \"members\", \n   
                \"access_inheritance\": \"inherit\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/sharing/transfer_folder:
    post:
      tags:
        - sharing
      summary: transfer_folder
      operationId: transfer_folder
      description: >-
        [transfer_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-transfer_folder)


        scope: `sharing.write`


        Transfer ownership of a shared folder to a member of the shared folder.

        User must have `AccessLevel.owner` access to the shared folder to
        perform a transfer.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"to_dropbox_id\":
                \"dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q\"\n}"
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/unmount_folder:
    post:
      tags:
        - sharing
      summary: unmount_folder
      operationId: unmount_folder
      description: >-
        [unmount_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unmount_folder)


        scope: `sharing.write`


        The current user unmounts the designated folder. They can re-mount the
        folder at a later time using `mount_folder`.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"shared_folder_id\": \"84528192421\"\n}"'
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/unshare_file:
    post:
      tags:
        - sharing
      summary: unshare_file
      operationId: unshare_file
      description: >-
        [unshare_file](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unshare_file)


        scope: `sharing.write`


        Remove all members from this file. Does not remove inherited members.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\"\n}"'
      
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /2/sharing/unshare_folder:
    post:
      tags:
        - sharing
      summary: unshare_folder
      operationId: unshare_folder
      description: >-
        [unshare_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unshare_folder)


        scope: `sharing.write`


        Allows a shared folder owner to unshare the folder.

        You'll need to call `check_job_status` to determine if the action has
        completed successfully.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"leave_a_copy\": false\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                .tag: complete
  /2/sharing/update_file_member:
    post:
      tags:
        - sharing
      summary: update_file_member
      operationId: update_file_member
      description: >-
        [update_file_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_file_member)


        scope: `sharing.write`


        Changes a member's access on a shared file.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"file\": \"id:3kmLmQFnf1AAAAAAAAAAAw\", \n   
                \"member\": {\n        \".tag\": \"email\", \n        \"email\":
                \"justin@example.com\"\n    }, \n    \"access_level\":
                \"viewer\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /2/sharing/update_folder_member:
    post:
      tags:
        - sharing
      summary: update_folder_member
      operationId: update_folder_member
      description: >-
        [update_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_folder_member)


        scope: `sharing.write`


        Allows an owner or editor of a shared folder to update another member's
        permissions.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n    \"member\":
                {\n        \".tag\": \"email\", \n        \"email\":
                \"justin@example.com\"\n    }, \n    \"access_level\":
                \"editor\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /2/sharing/update_folder_policy:
    post:
      tags:
        - sharing
      summary: update_folder_policy
      operationId: update_folder_policy
      description: >-
        [update_folder_policy](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_folder_policy)


        scope: `sharing.write`


        Update the sharing policies for a shared folder.

        User must have `AccessLevel.owner` access to the shared folder to update
        its policies.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"shared_folder_id\": \"84528192421\", \n   
                \"member_policy\": \"team\", \n    \"acl_update_policy\":
                \"owner\", \n    \"shared_link_policy\": \"members\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_type:
                  .tag: owner
                is_inside_team_folder: false
                is_team_folder: false
                name: dir
                policy:
                  acl_update_policy:
                    .tag: owner
                  shared_link_policy:
                    .tag: anyone
                  member_policy:
                    .tag: anyone
                  resolved_member_policy:
                    .tag: team
                preview_url: https://www.dropbox.com/scl/fo/fir9vjelf
                shared_folder_id: '84528192421'
                time_invited: '2016-01-20T00:00:00Z'
                path_lower: /dir
                link_metadata:
                  audience_options:
                    - .tag: public
                    - .tag: team
                    - .tag: members
                  current_audience:
                    .tag: public
                  link_permissions:
                    - action:
                        .tag: change_audience
                      allow: true
                  password_protected: false
                  url: ''
                permissions: []
                access_inheritance:
                  .tag: inherit
  /2/users/features/get_values:
    post:
      tags:
        - users
      summary: features/get_values
      operationId: features_get_values
      description: >-
        [features/get_values](https://www.dropbox.com/developers/documentation/http/documentation#users-features-get_values)


        scope: `account_info.read`


        Get a list of feature values that may be configured for the current
        account.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"features\": [\n        {\n            \".tag\":
                \"paper_as_files\"\n        }, \n        {\n           
                \".tag\": \"file_locking\"\n        }\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                values:
                  - .tag: paper_as_files
                    paper_as_files:
                      .tag: enabled
                      enabled: true
  /2/users/get_account:
    post:
      tags:
        - users
      summary: get_account
      operationId: get_account
      description: >-
        [get_account](https://www.dropbox.com/developers/documentation/http/documentation#users-get_account)


        scope: `sharing.read`


        Get information about a user's account.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"account_id\":
                \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\"\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                name:
                  given_name: Franz
                  surname: Ferdinand
                  familiar_name: Franz
                  display_name: Franz Ferdinand (Personal)
                  abbreviated_name: FF
                email: franz@dropbox.com
                email_verified: true
                disabled: false
                is_teammate: false
                profile_photo_url: >-
                  https://dl-web.dropbox.com/account_photo/get/dbaphid%3AAAHWGmIXV3sUuOmBfTz0wPsiqHUpBWvv3ZA?vers=1556069330102&size=128x128
  /2/users/get_account_batch:
    post:
      tags:
        - users
      summary: get_account_batch
      operationId: get_account_batch
      description: >-
        [get_account_batch](https://www.dropbox.com/developers/documentation/http/documentation#users-get_account_batch)


        scope: `sharing.read`


        Get information about multiple user accounts.  At most 300 accounts may
        be queried per request.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: >-
                "{\n    \"account_ids\": [\n       
                \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\", \n       
                \"dbid:AAH1Vcz-DVoRDeixtr_OA8oUGgiqhs4XPOQ\"\n    ]\n}"
      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                  name:
                    given_name: Franz
                    surname: Ferdinand
                    familiar_name: Franz
                    display_name: Franz Ferdinand (Personal)
                    abbreviated_name: FF
                  email: franz@dropbox.com
                  email_verified: true
                  disabled: false
                  is_teammate: false
                  profile_photo_url: >-
                    https://dl-web.dropbox.com/account_photo/get/dbaphid%3AAAHWGmIXV3sUuOmBfTz0wPsiqHUpBWvv3ZA?vers=1556069330102&size=128x128
  /2/users/get_current_account:
    post:
      tags:
        - users
      summary: get_current_account
      operationId: get_current_account
      description: >-
        [get_current_account](https://www.dropbox.com/developers/documentation/http/documentation#users-get_current_account)


        scope: `account_info.read`


        Get information about the current user's account.      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                account_id: dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc
                name:
                  given_name: Franz
                  surname: Ferdinand
                  familiar_name: Franz
                  display_name: Franz Ferdinand (Personal)
                  abbreviated_name: FF
                email: franz@dropbox.com
                email_verified: true
                disabled: false
                locale: en
                referral_link: https://db.tt/ZITNuhtI
                is_paired: true
                account_type:
                  .tag: business
                root_info:
                  .tag: user
                  root_namespace_id: '3235641'
                  home_namespace_id: '3235641'
                country: US
                team:
                  id: dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I
                  name: Acme, Inc.
                  sharing_policies:
                    shared_folder_member_policy:
                      .tag: team
                    shared_folder_join_policy:
                      .tag: from_anyone
                    shared_link_create_policy:
                      .tag: team_only
                  office_addin_policy:
                    .tag: disabled
                team_member_id: dbmid:AAHhy7WsR0x-u4ZCqiDl5Fz5zvuL3kmspwU
  /2/users/get_space_usage:
    post:
      tags:
        - users
      summary: get_space_usage
      operationId: get_space_usage
      description: >-
        [get_space_usage](https://www.dropbox.com/developers/documentation/http/documentation#users-get_space_usage)


        scope: `account_info.read`


        Get the space usage information for the current user's account.      
      responses:
        '200':
          description: OK
          headers:
            X-Dropbox-Request-Id:
              schema:
                type: integer
                example: '1234'
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                used: 314159265
                allocation:
                  .tag: individual
                  allocated: 10000000000
